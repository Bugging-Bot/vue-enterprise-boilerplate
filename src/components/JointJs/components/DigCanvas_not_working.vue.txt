<template>
  <div ref="chartContainer"></div>
  <p v-if="chartData.error">Error: {{ chartData.error }}</p>
</template>

<script setup lang="ts">
import { ref, onMounted, watch } from 'vue'
import * as joint from 'jointjs'
import { chartData, loadChartFromJson } from './chart-data-manager' // Updated import

const chartContainer = ref<HTMLElement | null>(null)
let graph: joint.dia.Graph
let paper: joint.dia.Paper

onMounted(() => {
  if (chartContainer.value) {
    graph = new joint.dia.Graph()
    paper = new joint.dia.Paper({
      el: chartContainer.value,
      model: graph,
      // ...chartData.paperOptions
      // width: 600,
      // height: 400
      width: chartContainer.value.clientWidth,
      height: chartContainer.value.clientHeight,
      gridSize: 10,
      drawGrid: true // This helps with debugging
    })

    fetch('/assets/chart1.json')
      .then((response) => response.json())
      .then((data) => {
        console.log('Loaded JSON data:', data)
        loadChartFromJson(data)
      })
      .catch((error) => {
        console.error('Error fetching JSON:', error)
        chartData.error = 'Error fetching JSON: ' + error.message
      })

    // watch(
    //   () => chartData.elements,
    //   (newElements) => {
    //     graph.clear()
    //     graph.addCells(newElements as joint.dia.Cell[])
    //     paper.setDimensions(chartData.paperOptions.width, chartData.paperOptions.height)
    //   },
    //   { deep: true }
    // )
    watch(
      () => chartData.jsonData,
      (newJsonData) => {
        console.log('first watch chartData.jsonData triggered')
        console.log('chartData.jsonData', chartData.jsonData)
        if (newJsonData) {
          if (graph.getCells().length > 0) {
            // Check if the graph has cells.
            graph.clear()
          }

          console.log('chartData.elements:', chartData.elements) // Added line
          graph.addCells(chartData.elements as joint.dia.Cell[]) // Corrected line
          console.log('Graph Cells:', graph.getCells()) // Added line
          paper.setDimensions(chartData.paperOptions.width, chartData.paperOptions.height)
          console.log('Paper Width:', chartData.paperOptions.width)
          console.log('Paper Height:', chartData.paperOptions.height)
          paper.updateViews() // add this line to force update of the view.
          paper.scaleContentToFit({ padding: 20 }) // Add this to ensure content is visible
        }
      },
      { immediate: true, deep: true } // Add immediate option}
    )
    watch(
      () => chartData.paperOptions,
      (newPaperOptions) => {
        console.log('second watch chartData.jsonData triggered')
        paper.setDimensions(newPaperOptions.width, newPaperOptions.height)
      },
      { deep: true }
    )
    // Add simple test shape for debugging.
    const rect = new joint.shapes.standard.Rectangle({
      position: { x: 100, y: 100 },
      size: { width: 100, height: 50 },
      attrs: { body: { fill: 'blue' }, label: { text: 'Test' } }
    })
    graph.addCell(rect)
    //
  } else {
    console.error('chartContainer element not found.')
    chartData.error = 'chartContainer element not found.'
  }
})
</script>

<style scoped>
div[ref='chartContainer'] {
  width: 600px;
  height: 400px;
  border: 2px solid black;
}
</style>
